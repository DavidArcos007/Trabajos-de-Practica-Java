/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ia8puzzlearcosaguas;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author David
 */
public class IA8PuzzleArcosAguas {

    public static void main(String[] args) {
  //Matrices de prueba
        /*int[][] inicio1 = {{7, 2, 4},
        {5, 0, 6},
        {8, 3, 1}};

        */
        int[][] matriz = generar_matriz();
        //imprimir_matriz(matriz);
        //int[][] matrizAleatoria = generarMatrizAleatoria();
        if (tieneSolucion(matriz)) {

            Nodo raiz = new Nodo(new Estado(matriz), null, true);
            AEstrella estrella = new AEstrella();

            Nodo hojaSolucion = estrella.crear_arbol(raiz);

            List<Nodo> caminoSolucion = AEstrella.obtener_camino_solucion(hojaSolucion);
            AEstrella.imprimir_camino_solucion(caminoSolucion);
            System.out.println("Num Hojas :" + Variables.HOJAS.size());
        } else {
            System.out.println("No tiene solucion");
            imprimir_matriz(matriz);
        }

    }

    public static boolean tieneSolucion(int[][] matrix) {
        int count = 0;
        List<Integer> array = new ArrayList<Integer>();

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                array.add(matrix[i][j]);
            }
        }

        Integer[] anotherArray = new Integer[array.size()];
        array.toArray(anotherArray);

        for (int i = 0; i < anotherArray.length - 1; i++) {
            for (int j = i + 1; j < anotherArray.length; j++) {
                if (anotherArray[i] != 0 && anotherArray[j] != 0 && anotherArray[i] > anotherArray[j]) {
                    count++;
                }
            }
        }

        return count % 2 == 0;
    }

    /* public static int[] llenarNumerosTableroAleatoriamente() {
        int numerosTablero[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};
        int numeroElementos = 0;
        boolean repetido;
        int aleatorio;

        while (numeroElementos < numerosTablero.length) {
            aleatorio = generarNumeroRandom();
            repetido = false;

            for (int i = 0; i < numerosTablero.length && !repetido; i++) {
                if (aleatorio == numerosTablero[i]) {
                    repetido = true;
                }
            }
            if (!repetido) {
                numerosTablero[numeroElementos++] = aleatorio;
            }
        }
        return numerosTablero;
    }

    public static int[][] generarMatrizAleatoria() {
        int matrizAleatoria[][] = new int[3][3];
        int numerosTablero[] = llenarNumerosTableroAleatoriamente();
        int k = 0;
        for (int i = 0; i < matrizAleatoria.length; i++) {
            for (int j = 0; j < matrizAleatoria[i].length; j++) {
                matrizAleatoria[i][j] = numerosTablero[k];
                k++;
            }
        }

        return matrizAleatoria;
    }

    public static int generarNumeroRandom() {
        int min = 0;
        int max = 9;
        Random random = new Random();
        int value = random.nextInt(max + min) + min;
        return value;
    }*/
    public static void imprimir_matriz(int matriz[][]) {
        for (int i = 0; i < 3; i++) {
            System.out.print("|  ");
            for (int j = 0; j < 3; j++) {
                System.out.print(matriz[i][j]);
                if (j != matriz[i].length - 1) {
                    System.out.print("\t");
                }
            }
            System.out.println("  |");
        }
    }

    public static int[][] generar_matriz() {
        int[][] inicio = {{0,1,2},{3,4,5},{6,7,8}};
        Estado matriz_randomica = new Estado(inicio);
        int numero_pasos =0;
        do{
           numero_pasos = (int) (Math.random() * 50);
        }while(!(numero_pasos>=20));
        for (int i = 0; i < numero_pasos; i++) {
            int numero_cambios = (int) (Math.random() * matriz_randomica.generar_estados().size());
            matriz_randomica.estado_actual = matriz_randomica.generar_estados().get(numero_cambios).estado_actual;
        }
        System.out.println(numero_pasos);
        inicio=matriz_randomica.estado_actual;
        return inicio;
    }

}
